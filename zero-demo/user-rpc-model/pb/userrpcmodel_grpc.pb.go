// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: userrpcmodel.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserrpcmodelClient is the client API for Userrpcmodel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserrpcmodelClient interface {
	//-----------------------newTable-----------------------
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*DelUserResp, error)
	GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error)
	SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error)
	//-----------------------newTable-----------------------
	AddUserData(ctx context.Context, in *AddUserDataReq, opts ...grpc.CallOption) (*AddUserDataResp, error)
	UpdateUserData(ctx context.Context, in *UpdateUserDataReq, opts ...grpc.CallOption) (*UpdateUserDataResp, error)
	DelUserData(ctx context.Context, in *DelUserDataReq, opts ...grpc.CallOption) (*DelUserDataResp, error)
	GetUserDataById(ctx context.Context, in *GetUserDataByIdReq, opts ...grpc.CallOption) (*GetUserDataByIdResp, error)
	SearchUserData(ctx context.Context, in *SearchUserDataReq, opts ...grpc.CallOption) (*SearchUserDataResp, error)
}

type userrpcmodelClient struct {
	cc grpc.ClientConnInterface
}

func NewUserrpcmodelClient(cc grpc.ClientConnInterface) UserrpcmodelClient {
	return &userrpcmodelClient{cc}
}

func (c *userrpcmodelClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	out := new(AddUserResp)
	err := c.cc.Invoke(ctx, "/pb.userrpcmodel/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcmodelClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, "/pb.userrpcmodel/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcmodelClient) DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*DelUserResp, error) {
	out := new(DelUserResp)
	err := c.cc.Invoke(ctx, "/pb.userrpcmodel/DelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcmodelClient) GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error) {
	out := new(GetUserByIdResp)
	err := c.cc.Invoke(ctx, "/pb.userrpcmodel/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcmodelClient) SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error) {
	out := new(SearchUserResp)
	err := c.cc.Invoke(ctx, "/pb.userrpcmodel/SearchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcmodelClient) AddUserData(ctx context.Context, in *AddUserDataReq, opts ...grpc.CallOption) (*AddUserDataResp, error) {
	out := new(AddUserDataResp)
	err := c.cc.Invoke(ctx, "/pb.userrpcmodel/AddUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcmodelClient) UpdateUserData(ctx context.Context, in *UpdateUserDataReq, opts ...grpc.CallOption) (*UpdateUserDataResp, error) {
	out := new(UpdateUserDataResp)
	err := c.cc.Invoke(ctx, "/pb.userrpcmodel/UpdateUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcmodelClient) DelUserData(ctx context.Context, in *DelUserDataReq, opts ...grpc.CallOption) (*DelUserDataResp, error) {
	out := new(DelUserDataResp)
	err := c.cc.Invoke(ctx, "/pb.userrpcmodel/DelUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcmodelClient) GetUserDataById(ctx context.Context, in *GetUserDataByIdReq, opts ...grpc.CallOption) (*GetUserDataByIdResp, error) {
	out := new(GetUserDataByIdResp)
	err := c.cc.Invoke(ctx, "/pb.userrpcmodel/GetUserDataById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userrpcmodelClient) SearchUserData(ctx context.Context, in *SearchUserDataReq, opts ...grpc.CallOption) (*SearchUserDataResp, error) {
	out := new(SearchUserDataResp)
	err := c.cc.Invoke(ctx, "/pb.userrpcmodel/SearchUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserrpcmodelServer is the server API for Userrpcmodel service.
// All implementations must embed UnimplementedUserrpcmodelServer
// for forward compatibility
type UserrpcmodelServer interface {
	//-----------------------newTable-----------------------
	AddUser(context.Context, *AddUserReq) (*AddUserResp, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error)
	DelUser(context.Context, *DelUserReq) (*DelUserResp, error)
	GetUserById(context.Context, *GetUserByIdReq) (*GetUserByIdResp, error)
	SearchUser(context.Context, *SearchUserReq) (*SearchUserResp, error)
	//-----------------------newTable-----------------------
	AddUserData(context.Context, *AddUserDataReq) (*AddUserDataResp, error)
	UpdateUserData(context.Context, *UpdateUserDataReq) (*UpdateUserDataResp, error)
	DelUserData(context.Context, *DelUserDataReq) (*DelUserDataResp, error)
	GetUserDataById(context.Context, *GetUserDataByIdReq) (*GetUserDataByIdResp, error)
	SearchUserData(context.Context, *SearchUserDataReq) (*SearchUserDataResp, error)
	mustEmbedUnimplementedUserrpcmodelServer()
}

// UnimplementedUserrpcmodelServer must be embedded to have forward compatible implementations.
type UnimplementedUserrpcmodelServer struct {
}

func (UnimplementedUserrpcmodelServer) AddUser(context.Context, *AddUserReq) (*AddUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserrpcmodelServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserrpcmodelServer) DelUser(context.Context, *DelUserReq) (*DelUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUser not implemented")
}
func (UnimplementedUserrpcmodelServer) GetUserById(context.Context, *GetUserByIdReq) (*GetUserByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserrpcmodelServer) SearchUser(context.Context, *SearchUserReq) (*SearchUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedUserrpcmodelServer) AddUserData(context.Context, *AddUserDataReq) (*AddUserDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserData not implemented")
}
func (UnimplementedUserrpcmodelServer) UpdateUserData(context.Context, *UpdateUserDataReq) (*UpdateUserDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserData not implemented")
}
func (UnimplementedUserrpcmodelServer) DelUserData(context.Context, *DelUserDataReq) (*DelUserDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserData not implemented")
}
func (UnimplementedUserrpcmodelServer) GetUserDataById(context.Context, *GetUserDataByIdReq) (*GetUserDataByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDataById not implemented")
}
func (UnimplementedUserrpcmodelServer) SearchUserData(context.Context, *SearchUserDataReq) (*SearchUserDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserData not implemented")
}
func (UnimplementedUserrpcmodelServer) mustEmbedUnimplementedUserrpcmodelServer() {}

// UnsafeUserrpcmodelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserrpcmodelServer will
// result in compilation errors.
type UnsafeUserrpcmodelServer interface {
	mustEmbedUnimplementedUserrpcmodelServer()
}

func RegisterUserrpcmodelServer(s grpc.ServiceRegistrar, srv UserrpcmodelServer) {
	s.RegisterService(&Userrpcmodel_ServiceDesc, srv)
}

func _Userrpcmodel_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcmodelServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userrpcmodel/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcmodelServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpcmodel_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcmodelServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userrpcmodel/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcmodelServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpcmodel_DelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcmodelServer).DelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userrpcmodel/DelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcmodelServer).DelUser(ctx, req.(*DelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpcmodel_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcmodelServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userrpcmodel/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcmodelServer).GetUserById(ctx, req.(*GetUserByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpcmodel_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcmodelServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userrpcmodel/SearchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcmodelServer).SearchUser(ctx, req.(*SearchUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpcmodel_AddUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcmodelServer).AddUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userrpcmodel/AddUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcmodelServer).AddUserData(ctx, req.(*AddUserDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpcmodel_UpdateUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcmodelServer).UpdateUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userrpcmodel/UpdateUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcmodelServer).UpdateUserData(ctx, req.(*UpdateUserDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpcmodel_DelUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcmodelServer).DelUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userrpcmodel/DelUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcmodelServer).DelUserData(ctx, req.(*DelUserDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpcmodel_GetUserDataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcmodelServer).GetUserDataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userrpcmodel/GetUserDataById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcmodelServer).GetUserDataById(ctx, req.(*GetUserDataByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Userrpcmodel_SearchUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserrpcmodelServer).SearchUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userrpcmodel/SearchUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserrpcmodelServer).SearchUserData(ctx, req.(*SearchUserDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Userrpcmodel_ServiceDesc is the grpc.ServiceDesc for Userrpcmodel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Userrpcmodel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.userrpcmodel",
	HandlerType: (*UserrpcmodelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _Userrpcmodel_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Userrpcmodel_UpdateUser_Handler,
		},
		{
			MethodName: "DelUser",
			Handler:    _Userrpcmodel_DelUser_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _Userrpcmodel_GetUserById_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _Userrpcmodel_SearchUser_Handler,
		},
		{
			MethodName: "AddUserData",
			Handler:    _Userrpcmodel_AddUserData_Handler,
		},
		{
			MethodName: "UpdateUserData",
			Handler:    _Userrpcmodel_UpdateUserData_Handler,
		},
		{
			MethodName: "DelUserData",
			Handler:    _Userrpcmodel_DelUserData_Handler,
		},
		{
			MethodName: "GetUserDataById",
			Handler:    _Userrpcmodel_GetUserDataById_Handler,
		},
		{
			MethodName: "SearchUserData",
			Handler:    _Userrpcmodel_SearchUserData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userrpcmodel.proto",
}
